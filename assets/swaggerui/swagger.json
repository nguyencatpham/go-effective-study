{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API Docs for Go Effective Study v1",
    "title": "Go Effective Study",
    "contact": {
      "name": "Emir Ribic",
      "url": "httpss://ribice.ba",
      "email": "ribice@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "2.0.0"
  },
  "host": "8080-f76958ae-2934-48df-ab1c-3a8d355f5bf8.ws-ap0.gitpod.io",
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logs in user by username and password.",
        "operationId": "login",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/credentials"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/loginResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/errMsg"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "404": {
            "$ref": "#/responses/errMsg"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Gets user's info from session.",
        "operationId": "meReq",
        "responses": {
          "200": {
            "$ref": "#/responses/userResp"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      },
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Posts user's info from session.",
        "operationId": "meReq",
        "responses": {
          "200": {
            "$ref": "#/responses/userResp"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/refresh/{token}": {
      "get": {
        "description": "Refreshes jwt token by checking at database whether refresh token exists.",
        "tags": [
          "auth"
        ],
        "summary": "Refreshes jwt token.",
        "operationId": "refresh",
        "parameters": [
          {
            "type": "string",
            "description": "refresh token",
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/refreshResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/v1/password/{id}": {
      "patch": {
        "description": "If user's old passowrd is correct, it will be replaced with new password.",
        "tags": [
          "password"
        ],
        "summary": "Changes user's password.",
        "operationId": "pwChange",
        "parameters": [
          {
            "type": "int",
            "description": "id of user",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Request body",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pwChange"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/v1/topics": {
      "get": {
        "description": "Returns list of topics. Depending on the topic role requesting it, it may return all topics for SuperAdmin/Admin topics, all company/location topics for Company/Location admins, and an error for non-admin topics.",
        "tags": [
          "topics"
        ],
        "summary": "Returns list of topics.",
        "operationId": "listTopics",
        "parameters": [
          {
            "type": "int",
            "description": "number of results",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "int",
            "description": "page number",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/topicListResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      },
      "post": {
        "description": "Returns list of topics. Depending on the topic role requesting it, it may return all topics for SuperAdmin/Admin topics, all company/location topics for Company/Location admins, and an error for non-admin topics.",
        "tags": [
          "topics"
        ],
        "summary": "Returns topic created.",
        "operationId": "topicCreate",
        "parameters": [
          {
            "description": "Request body",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/topicCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/topicListResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/v1/topics/{id}": {
      "get": {
        "description": "Returns a single topic by its ID.",
        "tags": [
          "topics"
        ],
        "summary": "Returns a single topic.",
        "operationId": "getTopic",
        "parameters": [
          {
            "type": "int",
            "description": "id of topic",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/topicResp"
          },
          "400": {
            "$ref": "#/responses/err"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "404": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      },
      "delete": {
        "description": "Deletes a topic with requested ID.",
        "tags": [
          "topics"
        ],
        "summary": "Deletes a topic",
        "operationId": "topicDelete",
        "parameters": [
          {
            "type": "int",
            "description": "id of topic",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/err"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      },
      "patch": {
        "description": "Updates topic's contact information -\u003e first name, last name, mobile, phone, address.",
        "tags": [
          "topics"
        ],
        "summary": "Updates topic's contact information",
        "operationId": "topicUpdate",
        "parameters": [
          {
            "type": "int",
            "description": "id of topic",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Request body",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/topicUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/topicResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "description": "Returns list of users. Depending on the user role requesting it, it may return all users for SuperAdmin/Admin users, all company/location users for Company/Location admins, and an error for non-admin users.",
        "tags": [
          "users"
        ],
        "summary": "Returns list of users.",
        "operationId": "listUsers",
        "parameters": [
          {
            "type": "int",
            "description": "number of results",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "int",
            "description": "page number",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/userListResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates new user account.",
        "operationId": "userCreate",
        "responses": {
          "200": {
            "$ref": "#/responses/userResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/errMsg"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    },
    "/v1/users/{id}": {
      "get": {
        "description": "Returns a single user by its ID.",
        "tags": [
          "users"
        ],
        "summary": "Returns a single user.",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "int",
            "description": "id of user",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/userResp"
          },
          "400": {
            "$ref": "#/responses/err"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "404": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      },
      "delete": {
        "description": "Deletes a user with requested ID.",
        "tags": [
          "users"
        ],
        "summary": "Deletes a user",
        "operationId": "userDelete",
        "parameters": [
          {
            "type": "int",
            "description": "id of user",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok"
          },
          "400": {
            "$ref": "#/responses/err"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      },
      "patch": {
        "description": "Updates user's contact information -\u003e first name, last name, mobile, phone, address.",
        "tags": [
          "users"
        ],
        "summary": "Updates user's contact information",
        "operationId": "userUpdate",
        "parameters": [
          {
            "type": "int",
            "description": "id of user",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Request body",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/userResp"
          },
          "400": {
            "$ref": "#/responses/errMsg"
          },
          "401": {
            "$ref": "#/responses/err"
          },
          "403": {
            "$ref": "#/responses/err"
          },
          "500": {
            "$ref": "#/responses/err"
          }
        }
      }
    }
  },
  "definitions": {
    "AccessRole": {
      "description": "AccessRole represents access role type",
      "type": "integer",
      "format": "int64",
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/utl/model"
    },
    "HTTP": {
      "description": "HTTP represents password https transport service",
      "type": "object",
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/api/password/transport"
    },
    "Role": {
      "description": "Role model",
      "type": "object",
      "properties": {
        "access_level": {
          "$ref": "#/definitions/AccessRole"
        },
        "id": {
          "$ref": "#/definitions/AccessRole"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/utl/model"
    },
    "Topic": {
      "description": "Topic represents topic for english lesson model",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "topic_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TopicDetail"
          },
          "x-go-name": "TopicDetails"
        },
        "type": {
          "$ref": "#/definitions/TopicType"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/utl/model"
    },
    "TopicDetail": {
      "description": "Topic detail represents topic for english lesson model",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "topic": {
          "$ref": "#/definitions/Topic"
        },
        "topic_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TopicID"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/utl/model"
    },
    "TopicType": {
      "description": "TopicType represents type of topic",
      "type": "integer",
      "format": "int64",
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/utl/model"
    },
    "User": {
      "description": "User represents user domain model",
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-go-name": "Active"
        },
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "company_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CompanyID"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "deleted_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "DeletedAt"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "first_name": {
          "type": "string",
          "x-go-name": "FirstName"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "last_login": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastLogin"
        },
        "last_name": {
          "type": "string",
          "x-go-name": "LastName"
        },
        "last_password_change": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastPasswordChange"
        },
        "location_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LocationID"
        },
        "mobile": {
          "type": "string",
          "x-go-name": "Mobile"
        },
        "phone": {
          "type": "string",
          "x-go-name": "Phone"
        },
        "role": {
          "$ref": "#/definitions/Role"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/utl/model"
    },
    "credentials": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/api/auth/transport"
    },
    "listResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page"
        },
        "topics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Topic"
          },
          "x-go-name": "Topics"
        }
      },
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/api/topic/transport"
    },
    "pwChange": {
      "description": "Password change request",
      "type": "object",
      "properties": {
        "new_password": {
          "type": "string",
          "x-go-name": "NewPassword"
        },
        "new_password_confirm": {
          "type": "string",
          "x-go-name": "NewPasswordConfirm"
        },
        "old_password": {
          "type": "string",
          "x-go-name": "OldPassword"
        }
      },
      "x-go-name": "changeReq",
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/api/password/transport"
    },
    "swaggTopicListResponse": {
      "description": "Topics model response",
      "type": "object",
      "properties": {
        "Body": {
          "description": "in:body",
          "type": "object",
          "properties": {
            "page": {
              "type": "integer",
              "format": "int64",
              "x-go-name": "Page"
            },
            "topics": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Topic"
              },
              "x-go-name": "Topics"
            }
          }
        }
      },
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/api/topic/transport"
    },
    "swaggTopicResponse": {
      "description": "Topic model response",
      "type": "object",
      "properties": {
        "Body": {
          "description": "in:body",
          "type": "object",
          "properties": {
            "created_at": {
              "type": "string",
              "format": "date-time",
              "x-go-name": "CreatedAt"
            },
            "deleted_at": {
              "type": "string",
              "format": "date-time",
              "x-go-name": "DeletedAt"
            },
            "description": {
              "type": "string",
              "x-go-name": "Description"
            },
            "id": {
              "type": "integer",
              "format": "int64",
              "x-go-name": "ID"
            },
            "name": {
              "type": "string",
              "x-go-name": "Name"
            },
            "topic_details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TopicDetail"
              },
              "x-go-name": "TopicDetails"
            },
            "type": {
              "$ref": "#/definitions/TopicType"
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "x-go-name": "UpdatedAt"
            }
          }
        }
      },
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/api/topic/transport"
    },
    "topicCreate": {
      "description": "Topic create request",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "type": {
          "$ref": "#/definitions/TopicType"
        }
      },
      "x-go-name": "createReq",
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/api/topic/transport"
    },
    "topicUpdate": {
      "description": "Topic update request",
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "first_name": {
          "type": "string",
          "x-go-name": "FirstName"
        },
        "last_name": {
          "type": "string",
          "x-go-name": "LastName"
        },
        "mobile": {
          "type": "string",
          "x-go-name": "Mobile"
        },
        "phone": {
          "type": "string",
          "x-go-name": "Phone"
        }
      },
      "x-go-name": "updateReq",
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/api/topic/transport"
    },
    "userCreate": {
      "description": "User create request",
      "type": "object",
      "properties": {
        "company_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CompanyID"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "first_name": {
          "type": "string",
          "x-go-name": "FirstName"
        },
        "last_name": {
          "type": "string",
          "x-go-name": "LastName"
        },
        "location_id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "LocationID"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "password_confirm": {
          "type": "string",
          "x-go-name": "PasswordConfirm"
        },
        "role_id": {
          "$ref": "#/definitions/AccessRole"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-name": "createReq",
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/api/user/transport"
    },
    "userUpdate": {
      "description": "User update request",
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "first_name": {
          "type": "string",
          "x-go-name": "FirstName"
        },
        "last_name": {
          "type": "string",
          "x-go-name": "LastName"
        },
        "mobile": {
          "type": "string",
          "x-go-name": "Mobile"
        },
        "phone": {
          "type": "string",
          "x-go-name": "Phone"
        }
      },
      "x-go-name": "updateReq",
      "x-go-package": "github.com/nguyencatpham/go-effective-study/pkg/api/user/transport"
    }
  },
  "responses": {
    "err": {
      "description": "Error response"
    },
    "errMsg": {
      "description": "Error response with message",
      "headers": {
        "message": {
          "type": "string"
        }
      }
    },
    "loginResp": {
      "description": "Login response",
      "schema": {
        "type": "object",
        "properties": {
          "expires": {
            "type": "string",
            "x-go-name": "Expires"
          },
          "refresh_token": {
            "type": "string",
            "x-go-name": "RefreshToken"
          },
          "token": {
            "type": "string",
            "x-go-name": "Token"
          }
        }
      }
    },
    "ok": {
      "description": "Success response"
    },
    "refreshResp": {
      "description": "Token refresh response",
      "schema": {
        "type": "object",
        "properties": {
          "expires": {
            "type": "string",
            "x-go-name": "Expires"
          },
          "token": {
            "type": "string",
            "x-go-name": "Token"
          }
        }
      }
    },
    "topicListResp": {
      "description": "Topics model response",
      "schema": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Page"
          },
          "topics": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Topic"
            },
            "x-go-name": "Topics"
          }
        }
      }
    },
    "topicResp": {
      "description": "Topic model response",
      "schema": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "DeletedAt"
          },
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "topic_details": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/TopicDetail"
            },
            "x-go-name": "TopicDetails"
          },
          "type": {
            "$ref": "#/definitions/TopicType"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          }
        }
      }
    },
    "userListResp": {
      "description": "Users model response",
      "schema": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Page"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/User"
            },
            "x-go-name": "Users"
          }
        }
      }
    },
    "userResp": {
      "description": "User model response",
      "schema": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "x-go-name": "Active"
          },
          "address": {
            "type": "string",
            "x-go-name": "Address"
          },
          "company_id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "CompanyID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "CreatedAt"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "DeletedAt"
          },
          "email": {
            "type": "string",
            "x-go-name": "Email"
          },
          "first_name": {
            "type": "string",
            "x-go-name": "FirstName"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID"
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "LastLogin"
          },
          "last_name": {
            "type": "string",
            "x-go-name": "LastName"
          },
          "last_password_change": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "LastPasswordChange"
          },
          "location_id": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "LocationID"
          },
          "mobile": {
            "type": "string",
            "x-go-name": "Mobile"
          },
          "phone": {
            "type": "string",
            "x-go-name": "Phone"
          },
          "role": {
            "$ref": "#/definitions/Role"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "x-go-name": "UpdatedAt"
          },
          "username": {
            "type": "string",
            "x-go-name": "Username"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": [
        "[]"
      ]
    }
  ]
}